{"version":3,"sources":["logo.png","components/Card.js","components/Loading.js","components/Navigation.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Card","props","className","card","animation","onClick","showBack","src","alt","showFront","description","Loading","Navigation","id","closeNav","href","App","state","toggleLogo","loading","cards","bind","openNav","this","setState","data","setTimeout","event","prevState","console","log","document","getElementById","style","width","logo","onMouseEnter","onMouseLeave","map","duration","key","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.43239b35.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.a68903b3.png\";","import React from \"react\";\nimport LazyLoad from \"react-lazyload\";\nimport \"./Card.css\";\n\nconst Card = (props) => (\n  <div className={props.card.animation}>\n    <div className=\"front\" onClick={() => props.showBack(props.card)}>\n      <img src=\"juice.jpg\" alt=\"Avatar\" className=\"card-image\" />\n      <div className=\"container\">\n        <h3>\n          Vitamin Juice <span className=\"price\">$24.99</span>\n        </h3>\n        <p>\n          Need a jump on your vitamins while drinking? Tired of popping the\n          pills? Drink our vitamin enhanced juice, available in several\n          flavours.\n        </p>\n      </div>\n    </div>\n    <div\n      className=\"container-back back\"\n      onClick={() => props.showFront(props.card)}\n    >\n      <h3>\n        Vitamin Juice <span className=\"price\">$24.99</span>\n      </h3>\n      <p>{props.card.description}</p>\n    </div>\n  </div>\n);\n\nexport default Card;\n","import React from 'react'\nimport './Loading.css';\n\nconst Loading = () => (\n    <div className=\"spinner\">\n    <div className=\"double-bounce1\"></div>\n    <div className=\"double-bounce2\"></div>\n  </div>\n);\n\nexport default Loading","import React from 'react';\nimport './Navigation.css';\n\n\nconst Navigation = (props) => (\n    <div id=\"myNav\" className=\"overlay\">\n    <a className=\"closebtn\" onClick={() => props.closeNav()}>&times;</a>  \n    <div className=\"overlay-content\">\n    <a href=\"\">Vitamin Juice</a>\n    <a href=\"\">Clothing</a>\n    <a href=\"\">Supplements</a>\n    <a href=\"\">Contact</a>\n    </div>\n    </div>\n)\n\nexport default Navigation;\n","import React, { Component } from 'react';\nimport logo from './logo.png';\nimport './App.css';\nimport Card from './components/Card';\nimport Loading from './components/Loading';\nimport Navigation from './components/Navigation';\nimport data from './data/data.json';\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      toggleLogo: true,\n      loading: true,\n      cards: [],\n    }\n    this.toggleLogo = this.toggleLogo.bind(this);\n    this.openNav = this.openNav.bind(this);\n    this.closeNav = this.closeNav.bind(this);\n    this.showBack = this.showBack.bind(this);\n    this.showFront = this.showFront.bind(this);\n  }\n\n  componentWillMount() {\n    this.setState({\n      cards: data,\n    });\n  }\n\n  componentDidMount() {\n    setTimeout(() => this.setState({ loading: false}), 3000);\n  }\n\n  toggleLogo(event) {\n    this.setState((prevState) => ({\n      toggleLogo: !prevState.toggleLogo\n    }));\n  }\n\n  showBack(card) {\n    let cards = this.state.cards;\n    cards[card.id].animation = 'card card-flip';\n    console.log(cards);\n\n    this.setState({\n      cards,\n    });\n  }\n\n  showFront(card) {\n    let cards = this.state.cards;\n    cards[card.id].animation = 'card';\n    console.log(cards);\n\n    this.setState({\n      cards,\n    });\n  }\n\n  openNav() {\n    document.getElementById(\"myNav\").style.width = \"100%\";\n  }\n\n  closeNav() {\n    document.getElementById(\"myNav\").style.width = \"0%\";\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <img src={logo} \n            className={this.state.toggleLogo ? 'static-logo' : 'static-logo animated jello'} \n            alt=\"logo\"\n            onMouseEnter={this.toggleLogo}\n            onMouseLeave={this.toggleLogo}\n            onClick={this.openNav}\n          />\n          <h1\n            className={this.state.toggleLogo ? 'menu-hidden' : 'menu animated bounceInDown'}\n            onClick={this.openNav}\n          >Menu</h1>\n          <Navigation closeNav={this.closeNav} />\n        </header>\n        {\n          this.state.loading ? <Loading /> :\n          <div className=\"Grid animated bounceInUp\">\n          {\n            this.state.cards.map((card) => (\n              <Card \n                duration={150} \n                key={card.id} \n                card={card} \n                showBack={this.showBack}\n                showFront={this.showFront}\n              />\n            ))\n          }\n        </div>\n        }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}